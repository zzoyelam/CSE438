//
//  MessagesViewController.swift
//  Lab1_Calc_MessageExt
//
//  Created by Zayid Oyelami on 6/19/19.
//  Copyright Â© 2019 Zayid Oyelami. All rights reserved.
//

import UIKit
import WebKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
        
   
   
    @IBOutlet weak var orgField: UITextField!
    @IBOutlet weak var discountField: UITextField!
    @IBOutlet weak var taxField: UITextField!
    @IBOutlet weak var peopleField: UITextField!
    @IBOutlet weak var totalLabel: UILabel!
    func calculate() {
        if let orgAmt = orgField.text, let taxAmt = taxField.text, let discAmt = discountField.text,let pplAmt = peopleField.text {
            if (Float(orgAmt) != nil && Float(taxAmt) != nil && Float(discAmt) != nil ){
                let orgAmtF = Float(orgAmt)!
                let taxAmtF = Float(taxAmt)!
                let discAmtF = Float(discAmt)!
                let pplAmtF = Float(pplAmt)!
                
                if (orgAmtF >= 0 && taxAmtF >= 0 && discAmtF >= 0 && pplAmtF >= 0){
                    orgField.backgroundColor = UIColor.white
                    taxField.backgroundColor = UIColor.white
                    discountField.backgroundColor = UIColor.white
                    let discounted = orgAmtF-(orgAmtF * discAmtF/100.00)
                    var total =  discounted+(discounted * taxAmtF/100.00)
                    total = total/pplAmtF
                    
                    totalLabel.text =  "$\(String(format: "%.2f Per Person", total))"
                }
                else{
                    if (orgAmtF < 0){
                        orgField.backgroundColor = UIColor.red
                        orgField.placeholder = "No negatives"
                    }
                    else {
                        orgField.backgroundColor = UIColor.white
                        orgField.placeholder = "Enter Amount"
                    }
                    if (taxAmtF < 0){
                        taxField.backgroundColor = UIColor.red
                        taxField.placeholder = "No negatives"
                    }
                    else {
                        taxField.backgroundColor = UIColor.white
                        taxField.placeholder = "Enter Percent"
                    }
                    if (discAmtF < 0){
                        discountField.backgroundColor = UIColor.red
                        discountField.placeholder = "No negatives"
                    }
                    else {
                        discountField.backgroundColor = UIColor.white
                        discountField.placeholder = "Enter Percent"
                    }
                    
                    
                    totalLabel.text = "Try again"
                }
                
            }
            else{
                
                totalLabel.text = "Try again. Need to fill in all values."
            }
        }
        
        
    }
    @IBAction func splitButton(_ sender: Any) {
        calculate()
    }
    @IBAction func sendSplit(_ sender: Any) {
        let owe = "The bill is "+totalLabel.text! ?? "Failed to send"
        self.activeConversation?.insertText(owe ?? "Failed to send", completionHandler: { (error) in
            
        })
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        orgField.text = "0"
        taxField.text = "0"
        discountField.text = "0"
        peopleField.text = "1"
        totalLabel.layer.cornerRadius = 30
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    

}

